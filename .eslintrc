{
    "env": {
        "browser": true,
        "es2021": true
    },
    "settings": {
        "import/resolver": {
            "babel-module": { "allowExistingDirectories": true }
        },
        "import/extensions": [".ts", ".tsx"]
    },
    "extends": [
        "prettier",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "tsx": true,
            "experimentalObjectRestSpread": true,
            "impliedStrict": true,
            "binaryLiterals": true
        },
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": ["./tsconfig.json", "webpack.config.js"]
    },
    "plugins": [
        "react",
        "@typescript-eslint",
        "prettier",
        "import",
        "unused-imports",
        "react-hooks",
        "module-resolver"
    ],
    "rules": {
        "module-resolver/use-alias": [
            "error",
            {
                "extensions": [".ts", ".tsx"]
            }
        ],
        "@typescript-eslint/ban-ts-comment": "off",
        "react-hooks/exhaustive-deps": "warn",
        "react/prop-types": "off",
        "react/display-name": "off",
        // "@typescript-eslint/explicit-module-boundary-types": "on",
        "prettier/prettier": "warn",
        "react/jsx-filename-extension": [
            1,
            {
                "extensions": [".ts", ".tsx"]
            }
        ],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error"],
        "unused-imports/no-unused-imports": "warn",
        "unused-imports/no-unused-vars": [
            "off",
            {
                "vars": "all",
                "varsIgnorePattern": "^_",
                "args": "after-used",
                "argsIgnorePattern": "^_"
            }
        ],
        // "import/resolver": 2,
        "import/order": [
            "warn",
            {
                "pathGroups": [
                    {
                        "pattern": "@src/**",
                        "group": "internal",
                        "// position": "after"
                    }
                ],
                "pathGroupsExcludedImportTypes": ["external"],
                "newlines-between": "always",
                "groups": [
                    "builtin",
                    "external",
                    "internal",
                    "parent",
                    "sibling",
                    "index",
                    "object"
                ]
            }
        ]
    }
}
